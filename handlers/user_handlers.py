import asyncio
import random
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from database.database import check_user, add_user
from keyboards.inline_kb import (
    start_kb, start_quiz_kb,
    create_question_kb,
    next_question_kb
    )


router = Router()


class QuizStates(StatesGroup):
    waiting_for_start = State()
    question_1 = State()
    question_2 = State()
    question_3 = State()
    question_4 = State()
    question_5 = State()
    question_6 = State()
    question_7 = State()
    question_8 = State()
    question_9 = State()
    question_10 = State()


# –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
correct_answers = {
    1: 'q1_2', 2: 'q2_1', 3: 'q3_2', 4: 'q4_4', 5: 'q5_3',
    6: 'q6_4', 7: 'q7_1', 8: 'q8_3', 9: 'q9_1', 10: 'q10_3'
}

# –°–ø–∏—Å–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
correct_responses = [
    "üéØ –ú–æ–ª–æ–¥—Ü–æ–º, —É–¥–∏–≤–∏–ª! –ì–æ—Ä–∂—É—Å—å —Ç–æ–±–æ–π!",
    "ü§ì –ù—É –Ω–∞–¥–æ –∂–µ, –Ω–µ –∑—Ä—è –æ—á–∫–∏ –Ω–æ—Å–∏—à—å!",
    "üî• –ö—Ä–∞—Å–∞–≤—á–∏–∫, —ç—Ç–∏–º –≤–æ–ø—Ä–æ—Å–æ–º —è –æ—Å–æ–±–æ –≥–æ—Ä–∂—É—Å—å",
    "üòé –ë—ã–ª–æ –ª–µ–≥–∫–æ, –Ω–µ —Ç–∞–∫ –ª–∏? –ú–æ–ª–æ–¥–µ—Ü",
    "üí™ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞, —Ç—ã —É–≥–∞–¥–∞–ª!",
    "üåü –ë—Ä–∞–≤–æ! –¢—ã –ø—Ä–æ—Å—Ç–æ –≥–µ–Ω–∏–π!",
    "üöÄ –û—Ç–ª–∏—á–Ω—ã–π –æ—Ç–≤–µ—Ç! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!",
    "üèÜ –ü–æ—Ç—Ä—è—Å–∞—é—â–µ! –¢—ã –Ω–∞ –≤–µ—Ä–Ω–æ–º –ø—É—Ç–∏!"
]

incorrect_responses = [
    "üòÖ –ù–∏—á–µ–≥–æ, –¥–≤–æ—Ä–Ω–∏–∫ —Ç–æ–∂–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è, –Ω–µ —É–≥–∞–¥–∞–ª, –Ω–µ –±–µ–¥–∞",
    "ü§¶‚Äç‚ôÇÔ∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, —Ç—É–ø–æ—Ä–µ–∑",
    "üòÇ –ê—Ö–∞—Ö–∞—Ö–∞, –Ω–µ—Ç, –º–∏–º–æ",
    "üôÑ –í–æ–ø—Ä–æ—Å –ª–µ–≥—á–∞–π—à–∏–π...–¥–ª—è –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö –ª—é–¥–µ–π",
    "üé™ –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û –ê–•–•–ê–•–ê–•–ê–•–ê–™–•–ê",
    "üíÄ –≠—Ö, —Ç—ã –ø–æ–¥–≤–µ–ª –º–µ–Ω—è...",
    "üëé –ú–∏–º–æ –∫–∞—Å—Å—ã! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –≤ —Å–ª–µ–¥—É—é—â–µ–π –∂–∏–∑–Ω–∏",
    "ü§° –°–µ—Ä—å–µ–∑–Ω–æ? –¢—ã –≤—ã–±—Ä–∞–ª —ç—Ç–æ—Ç –æ—Ç–≤–µ—Ç?"
]

timer_responses = [
    "‚è∞ –ì—É–≥–ª–∏—Ç—å –Ω–∞ —Ä–∞–±–æ—Ç–µ –±—É–¥–µ—à—å, –¥—É–º–∞–π —Ä–µ—â–µ",
    "üí∏ –¢–æ—Ä–æ–ø–∏—Å—å, –≤—Ä–µ–º—è –¥–µ–Ω—å–≥–∏!",
    "üêå –ù—É —Ç—ã –∏ —Ç–æ—Ä–º–æ–∑, –æ–π –±–∞—Ç—é—à–∫–∏, –ª—é–¥–∏ –≥–ª—è–Ω—å—Ç–µ –Ω–∞ –Ω–µ–≥–æ",
    "üìä –î–∞–≤–∞–π —Å–ª–µ–¥–∏—Ç—å –∑–∞ –≤—Ä–µ–º–µ–Ω–µ–º, –¢–ê–ô–ú–ú–ï–ù–ï–î–ñ–ú–ï–ù–¢ –ë–õ–ò–ù",
    "üö¶ –í—Ä–µ–º—è –≤—ã—à–ª–æ! –¢—ã —á—Ç–æ, –∑–∞—Å–Ω—É–ª?",
    "‚ö° –ë—ã—Å—Ç—Ä–µ–µ, –±—ã—Å—Ç—Ä–µ–µ! –£ —Ç–µ–±—è –≤—Å–µ–≥–æ 15 —Å–µ–∫—É–Ω–¥!",
    "üß≠ –û–π, –≤—Å–µ... –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ! –¢–æ—Ä–º–æ–∑",
    "üé™ –¢–∞–π–º–µ—Ä —É–º–µ—Ä, –∞ —Ç–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫ –Ω–∞ –≥—Ä–∞–Ω–∏!"
]

user_scores = {}
user_timers = {}


@router.message(CommandStart())
async def cmd_start(message: Message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—Ö–æ–¥–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É
    if await check_user(user_id):
        await message.answer("üéÇ –ê—Ö–∞—Ö, –≥—É–±–∞ –Ω–µ –¥—É—Ä–∞, –ø–æ–¥–æ–∂–¥–∏ –µ—â–µ –≥–æ–¥–∏–∫! üòÇ")
        return

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
        welcome_photo = FSInputFile("images/welcome.jpg")
        await message.answer_photo(
            photo=welcome_photo,
            caption="üéâ –ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–∂–µ! –°–µ–≥–æ–¥–Ω—è —è –±—ã —Ö–æ—Ç–µ–ª —Ç–µ–±—è –ø–æ–∑–¥—Ä–∞–≤–∏—Ç—å —Å –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è! ü•≥\n\n–ù–æ, –ª—É—á—à–∏–π –ø–æ–¥–∞—Ä–æ–∫ —ç—Ç–æ —Ç–æ—Ç - –∫–æ—Ç–æ—Ä—ã–π —Ç—ã –ø–æ–ª—É—á–∏–ª —á–µ—Å—Ç–Ω–æ –∏ –∑–∞—Å–ª—É–∂–µ–Ω–Ω–æ. üí´\n\n–°—ã–≥—Ä–∞–µ–º –≤ –∏–≥—Ä—É? –Ø –∑–∞–¥–∞–º —Ç–µ–±–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤, –æ–∫–æ–ª–æ 10. üìù\n\n‚úÖ –û—Ç–≤–µ—Ç–∏—à—å –Ω–∞ 7 –∏–∑ 10 –≤–µ—Ä–Ω–æ - –ø–æ–ª—É—á–∏—à—å –ø–æ–¥–∞—Ä–æ–∫!\n‚ùå –ê –µ—Å–ª–∏ 6 –∏–∑ 10 –∏–ª–∏ –º–µ–Ω—å—à–µ - —Ç–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫ —Å–≥–æ—Ä–∏—Ç –∫ —á–µ—Ä—Ç–æ–≤–æ–π –º–∞—Ç–µ—Ä–∏!!! üî•\n\n–¢—ã –≥–æ—Ç–æ–≤? üéØ",
            reply_markup=start_kb
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
        await message.answer(
            "üéâ –ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–∂–µ! –°–µ–≥–æ–¥–Ω—è —è –±—ã —Ö–æ—Ç–µ–ª —Ç–µ–±—è –ø–æ–∑–¥—Ä–∞–≤–∏—Ç—å —Å –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è! ü•≥\n\n–ù–æ, –ª—É—á—à–∏–π –ø–æ–¥–∞—Ä–æ–∫ —ç—Ç–æ —Ç–æ—Ç - –∫–æ—Ç–æ—Ä—ã–π —Ç—ã –ø–æ–ª—É—á–∏–ª —á–µ—Å—Ç–Ω–æ –∏ –∑–∞—Å–ª—É–∂–µ–Ω–Ω–æ. üí´\n\n–°—ã–≥—Ä–∞–µ–º –≤ –∏–≥—Ä—É? –Ø –∑–∞–¥–∞–º —Ç–µ–±–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤, –æ–∫–æ–ª–æ 10. üìù\n\n‚úÖ –û—Ç–≤–µ—Ç–∏—à—å –Ω–∞ 7 –∏–∑ 10 –≤–µ—Ä–Ω–æ - –ø–æ–ª—É—á–∏—à—å –ø–æ–¥–∞—Ä–æ–∫!\n‚ùå –ê –µ—Å–ª–∏ 6 –∏–∑ 10 –∏–ª–∏ –º–µ–Ω—å—à–µ - —Ç–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫ —Å–≥–æ—Ä–∏—Ç –∫ —á–µ—Ä—Ç–æ–≤–æ–π –º–∞—Ç–µ—Ä–∏!!! üî•\n\n–¢—ã –≥–æ—Ç–æ–≤? üéØ",
            reply_markup=start_kb
        )


@router.callback_query(F.data == "ready_yes")
async def process_ready(callback: CallbackQuery, state: FSMContext):
    await callback.answer()  # –í–∞–∂–Ω–æ: –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback —Å–Ω–∞—á–∞–ª–∞

    try:
        welcome2_photo = FSInputFile("images/welcome_2.jpg")
        await callback.message.answer_photo(
            photo=welcome2_photo,
            caption="üéä –û—Ç–ª–∏—á–Ω–æ! –ö–∞–∫ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤, –∂–º–∏ –Ω–∏–∂–µ –∫–Ω–æ–ø–∫—É –Ω–∞—á–∞—Ç—å! üöÄ\n\n–ù–æ –∑–∞–±—ã–ª –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å - —É –≤–æ–ø—Ä–æ—Å–æ–≤ —Å—Ç–æ–∏—Ç —Ç–∞–π–º–µ—Ä 15 —Å–µ–∫—É–Ω–¥! ‚è≥\n\n–ï—Å–ª–∏ —Ç—ã –Ω–µ —É—Å–ø–µ–µ—à—å - –≤–æ–ø—Ä–æ—Å –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ –ø—Ä–æ–∏–≥—Ä–∞–Ω–Ω—ã–π! üíÄ\n\n–í–æ—Ç —Ç–∞–∫–∞—è —è –∂–æ–ø–∞))) üòà –¢–∞–∫ –∑–∞—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ! üé≤",
            reply_markup=start_quiz_kb
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤—Ç–æ—Ä–æ–≥–æ —Ñ–æ—Ç–æ: {e}")
        await callback.message.answer(
            "üéä –û—Ç–ª–∏—á–Ω–æ! –ö–∞–∫ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤, –∂–º–∏ –Ω–∏–∂–µ –∫–Ω–æ–ø–∫—É –Ω–∞—á–∞—Ç—å! üöÄ\n\n–ù–æ –∑–∞–±—ã–ª –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å - —É –≤–æ–ø—Ä–æ—Å–æ–≤ —Å—Ç–æ–∏—Ç —Ç–∞–π–º–µ—Ä 15 —Å–µ–∫—É–Ω–¥! ‚è≥\n\n–ï—Å–ª–∏ —Ç—ã –Ω–µ —É—Å–ø–µ–µ—à—å - –≤–æ–ø—Ä–æ—Å –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ –ø—Ä–æ–∏–≥—Ä–∞–Ω–Ω—ã–π! üíÄ\n\n–í–æ—Ç —Ç–∞–∫–∞—è —è –∂–æ–ø–∞))) üòà –¢–∞–∫ –∑–∞—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ! üé≤",
            reply_markup=start_quiz_kb
        )

    await state.set_state(QuizStates.waiting_for_start)

@router.callback_query(F.data == "start_quiz")
async def start_quiz(callback: CallbackQuery, state: FSMContext):
    await callback.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    
    user_id = callback.from_user.id
    user_scores[user_id] = 0
    await ask_question(1, callback.message, state)

async def ask_question(question_num: int, message, state: FSMContext):
    questions = {
        1: "üéØ –û—Ç–ª–∏—á–Ω–æ, –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å:\n\nüí≠ –ö–∞–∫–æ–µ —Å–ª–æ–≤–æ –≤—Å–µ–≥–¥–∞ –ø–∏—à–µ—Ç—Å—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ?",
        2: "üöÄ –ï–¥–µ–º –¥–∞–ª—å—à–µ, –≤—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å:\n\nüî¨ –ê—Ç–æ–º–Ω—ã–π –≤–µ—Å —Å–µ—Ä–µ–±—Ä–∞?",
        3: "üí© –î–∞–≤–∞–π –Ω–µ –æ–±–æ—Å—Ä–∏—Å—å!\n\nüö¶ –ß—Ç–æ –Ω—É–∂–Ω–æ –¥–µ–ª–∞—Ç—å, –∫–æ–≥–¥–∞ –≤–∏–¥–∏—à—å –∑–µ–ª—ë–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ—á–∫–∞?",
        4: "ü§û –í–µ—Ä—é –≤ —Ç–µ–±—è, –¥–µ–ª–∞–π!\n\nüó£Ô∏è –ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≥–æ–≤–æ—Ä–∏—Ç—å: ¬´–Ω–µ –≤–∏–∂—É –±–µ–ª—ã–π –∂–µ–ª—Ç–æ–∫¬ª –∏–ª–∏ ¬´–Ω–µ –≤–∏–∂—É –±–µ–ª–æ–≥–æ –∂–µ–ª—Ç–∫–∞¬ª?",
        5: "üé™ –ü–æ–ª–ø—É—Ç–∏, –Ω—É –ø–æ—á—Ç–∏...\n\nüìè –ß–µ–º—É —Ä–∞–≤–Ω–∞ '–º–µ—Ä–∞'?",
        6: "üò´ –¢—ã —Ö–æ—Ç—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—à—å –∫–∞–∫–æ–π –≥–µ–º–æ—Ä—Ä–æ–π —ç—Ç–æ –≤—Å—ë –ø—Ä–∏–¥—É–º—ã–≤–∞—Ç—å?\n\nüìõ –ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–∏—à–µ—Ç—Å—è –∏–º—è?",
        7: "üòÇ –ù–∞–¥–µ—é—Å—å —Ç—ã —É–∂–µ –Ω–∞–±—Ä–∞–ª –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –∏ –º—ã –∑–Ω–∞—Ç–Ω–æ –ø–æ—Ä–∂–µ–º!!!\n\nüî¢ –ö–∞–∫–∞—è —Ü–∏—Ñ—Ä–∞ —É–º–µ–Ω—å—à–∏—Ç—Å—è –Ω–∞ —Ç—Ä–µ—Ç—å, –µ—Å–ª–∏ –µ—ë –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç—å?",
        8: "ü§£ –ê—Ö–∞—Ö–∞—Ö–∞—Ö–∞—Ö) —Å–ø–æ—Ä—é —Ç—ã —Ç–∞–º –≤—Å–ø–æ—Ç–µ–ª —É–∂–µ))\n\n‚úàÔ∏è –í—ã —Å–∏–¥–∏—Ç–µ –≤ —Å–∞–º–æ–ª—ë—Ç–µ, –≤–ø–µ—Ä–µ–¥–∏ –≤–∞—Å –ª–æ—à–∞–¥—å, —Å–∑–∞–¥–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—å. –ì–¥–µ –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?",
        9: "üé≤ –ï—Å–ª–∏ —Ç—ã –µ—â–µ –Ω–µ –ø—Ä–æ–∏–≥—Ä–∞–ª...—Ç–æ —Å–µ–π—á–∞—Å —Ç–≤–æ–π —à–∞–Ω—Å –ø—Ä–æ–∏–≥—Ä–∞—Ç—å))\n\nüë®‚Äçüéì –û—Ç—á–µ—Å—Ç–≤–æ –ö–∞–Ω–∫–∏–Ω–∞ –°—Ç–∞—Å–∞?",
        10: "üèÅ –§–∏–Ω–∏—à, —Ç—É—Ç –º–æ–∂–Ω–æ –æ—Å–æ–±–æ –Ω–µ –ø–∞—Ä–∏—Ç—å—Å—è...–•–æ—Ç—è –Ω–µ—Ç, –ø–∞—Ä—å—Å—è!\n\nüìÖ –í –∫–∞–∫–æ–º –º–µ—Å—è—Ü–µ 28 –¥–Ω–µ–π?"
    }
    
    try:
        photo = FSInputFile(f"images/{question_num}.jpg")
        await message.answer_photo(
            photo=photo,
            caption=questions[question_num],
            reply_markup=create_question_kb(question_num)
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –≤–æ–ø—Ä–æ—Å–∞ {question_num}: {e}")
        await message.answer(
            questions[question_num],
            reply_markup=create_question_kb(question_num)
        )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    states_map = {
        1: QuizStates.question_1, 2: QuizStates.question_2, 3: QuizStates.question_3,
        4: QuizStates.question_4, 5: QuizStates.question_5, 6: QuizStates.question_6,
        7: QuizStates.question_7, 8: QuizStates.question_8, 9: QuizStates.question_9,
        10: QuizStates.question_10
    }
    await state.set_state(states_map[question_num])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = message.chat.id
    if user_id in user_timers:
        user_timers[user_id].cancel()
    
    user_timers[user_id] = asyncio.create_task(
        question_timer(question_num, message, state)
    )

async def question_timer(question_num: int, message, state: FSMContext):
    await asyncio.sleep(15)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ
    current_state = await state.get_state()
    states_map = {
        1: QuizStates.question_1, 2: QuizStates.question_2, 3: QuizStates.question_3,
        4: QuizStates.question_4, 5: QuizStates.question_5, 6: QuizStates.question_6,
        7: QuizStates.question_7, 8: QuizStates.question_8, 9: QuizStates.question_9,
        10: QuizStates.question_10
    }
    
    expected_state = states_map.get(question_num)
    if current_state == expected_state:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –≤–æ–≤—Ä–µ–º—è
        user_id = message.chat.id
        timer_response = random.choice(timer_responses)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –≤–æ–ø—Ä–æ—Å–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–ª–µ–¥—É—é—â–∏–π"
        await state.update_data(current_question=question_num)
        
        await message.answer(
            f"‚è∞ {timer_response}\n\n–í–æ–ø—Ä–æ—Å –∑–∞—Å—á–∏—Ç–∞–Ω –∫–∞–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π! ‚ùå\n\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è üëá",
            reply_markup=next_question_kb
        )

@router.callback_query(F.data == "next_question")
async def process_next_question(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    current_question = data.get('current_question', 1)
    
    user_id = callback.from_user.id
    user_scores[user_id] = user_scores.get(user_id, 0)
    
    await callback.message.answer(f"üìä –¢–≤–æ–π —Å—á—ë—Ç: {user_scores[user_id]} –∏–∑ 10 ‚ùå")
    
    if current_question < 10:
        await asyncio.sleep(1)
        await ask_question(current_question + 1, callback.message, state)
    else:
        await finish_quiz(user_id, callback.message, state)

async def process_answer(question_num: int, callback: CallbackQuery, message, state: FSMContext, is_correct: bool):
    user_id = callback.from_user.id if callback else message.chat.id
    
    # –û—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_timers:
        user_timers[user_id].cancel()
        del user_timers[user_id]
    
    if is_correct:
        user_scores[user_id] = user_scores.get(user_id, 0) + 1
        response_text = f"{random.choice(correct_responses)}\n\nüìä –¢–≤–æ–π —Å—á—ë—Ç: {user_scores[user_id]} –∏–∑ 10 ‚úÖ"
    else:
        user_scores[user_id] = user_scores.get(user_id, 0)
        response_text = f"{random.choice(incorrect_responses)}\n\nüìä –¢–≤–æ–π —Å—á—ë—Ç: {user_scores[user_id]} –∏–∑ 10 ‚ùå"
    
    target_message = callback.message if callback else message
    await target_message.answer(response_text)
    
    if question_num < 10:
        await asyncio.sleep(2)
        await ask_question(question_num + 1, target_message, state)
    else:
        await finish_quiz(user_id, target_message, state)

async def finish_quiz(user_id: int, message, state: FSMContext):
    score = user_scores.get(user_id, 0)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if score >= 7:
        result_emoji = "üéÅüéâ"
        result_comment = "–¢—ã –∑–∞—Å–ª—É–∂–∏–ª –ø–æ–¥–∞—Ä–æ–∫! ü•≥"
    else:
        result_emoji = "üí∏üî•"
        result_comment = "–¢–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫ —Å–≥–æ—Ä–µ–ª –∫ —á–µ—Ä—Ç–æ–≤–æ–π –º–∞—Ç–µ—Ä–∏! üòà"
    
    result_text = f"""üèÅ –ù—É —á—Ç–æ –∂–µ, —Å–ø–∞—Å–∏–±–æ —Ç–µ–±–µ –∑–∞ –∏–≥—Ä—É! {result_emoji}

üìä –¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç - {score}/10
{result_comment}

üéÇ –ù–æ –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ, –∫–∞–∫–æ–π —Ç—É—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç? –≠—Ç–æ –∂–µ –≤—Å—ë —Ç–∞–∫–∏ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è! 
üí´ –ü–æ—ç—Ç–æ–º—É —è –¥—É–º–∞—é —Ç—É—Ç –ø–ª–µ–≤–∞—Ç—å –Ω–∞ –ø–æ–¥–∞—Ä–æ–∫, –≥–ª–∞–≤–Ω–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ...

üòä –ù—É –±—É–¥—å –∑–¥–æ—Ä–æ–≤, —Å–æ—Ö—Ä–∞–Ω—è–π –ø–æ–∑–∏—Ç–∏–≤ –∏ –Ω–µ –±—É–¥—å –∂–æ–ø–æ–π! 
‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å—è –∏ –ø—Ä–æ—á–µ–π –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ –±–∞–Ω–∞–ª—å–Ω–æ–π —à—Ç—É–∫–∏ —Ç–µ–±–µ –∏ —Ç–∞–∫ –Ω–∞–∂–µ–ª–∞—é—Ç..."""
    
    try:
        last1_photo = FSInputFile("images/last1.jpg")
        await message.answer_photo(
            photo=last1_photo,
            caption=result_text
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ last1.jpg: {e}")
        await message.answer(result_text)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
    await add_user(user_id)
    
    # –í—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 25 —Å–µ–∫—É–Ω–¥
    await asyncio.sleep(25)
    
    second_message_text = """üí≠ –ù–æ –∫—Å—Ç–∞—Ç–∏, –µ—Å–ª–∏ —Å–µ—Ä—å–µ–∑–Ω–æ...

üö´ –Ø —Ç–µ–±–µ —Å–æ–≤–µ—Ç—É—é –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è "—Ç–∞–∫–∏–º –∫–∞–∫ –µ—Å—Ç—å"! 
üîÑ –ï—Å–ª–∏ —Ç—ã –æ—Å—Ç–∞–µ—à—å—Å—è —Ç–∞–∫–∏–º –∫–∞–∫ –µ—Å—Ç—å - —Ç—ã —Å—Ç–æ–∏—à—å –Ω–∞ –º–µ—Å—Ç–µ.

üåü –Ø –∂–µ–ª–∞—é —Ç–µ–±–µ –Ω–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ç—Ä—É–¥–Ω–æ—Å—Ç–µ–π –∏ –ø—Ä–æ–±–ª–µ–º, 
–∞ —É–º–µ–Ω–∏—è –∏—Ö –ø—Ä–µ–æ–¥–æ–ª–µ–≤–∞—Ç—å –∏ —É—á–∏—Ç—å—Å—è –Ω–∞ –∏—Ö –æ–ø—ã—Ç–µ!

üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ì–ª–∞–≤–Ω–æ–µ –≤ –∂–∏–∑–Ω–∏ - —Å–µ–º—å—è –∏ –ø–æ–∑–∏—Ç–∏–≤. 
üíñ –ë—É–¥—å –ø–æ–∑–∏—Ç–∏–≤–µ–Ω –∏ —Ö—Ä–∞–Ω–∏ —Å–µ–º—å—é!"""
    
    try:
        last2_photo = FSInputFile("images/last2.jpg")
        await message.answer_photo(
            photo=last2_photo,
            caption=second_message_text
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ last2.jpg: {e}")
        await message.answer(second_message_text)
    
    # –¢—Ä–µ—Ç—å–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥
    await asyncio.sleep(15)
    
    try:
        ozon_photo = FSInputFile("images/–ü–æ–¥–∞—Ä–æ—á–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç.pdf")
        await message.answer_photo(
            photo=ozon_photo,
            caption="""ü§î –ù—É –ª–∞–¥–Ω–æ, —á—Ç–æ-—Ç–æ —è —Ç–∞–∫ –ø–æ–¥—É–º–∞–ª... 
üé≠ –ù–∞–≤–µ—Ä–Ω–æ–µ —ç—Ç–æ –±—ã–ª–æ –±—ã –ø—Ä–∏—è—Ç–Ω–æ –≤ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è, 
—Ö–æ—Ç—å —ç—Ç–æ—Ç –¥–µ–Ω—å –∏ —Å–µ–≥–æ–¥–Ω—è... –≤ —á–µ—Ç–≤–µ—Ä–≥...–±–ª$–¥—å!

–í–æ—Ç —á—Ç–æ –º–Ω–µ –ø—Ä–µ–¥–ª–æ–∂–∏—à—å —Å–µ–≥–æ–¥–Ω—è –ø–æ–¥–Ω—è—Ç—å —á–∞—Ä–∫—É –∑–∞ —Ç–≤–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ 
–∏ –ø–æ—Ç–æ–º –Ω–∞ —Ä–∞–±–æ—Ç—É –∑–∞–≤—Ç—Ä–∞!?!? 

–õ–æ–≤–∫–æ —Ç—ã –ø—Ä–∏–¥—É–º–∞–ª... –∏–ª–∏ –µ—â–µ —Å–∫–∞–∂–∏ –Ω–µ –ø–∏—Ç—å?

üéÇ –û–π –≤—Å—ë, —Å –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è, –¥—Ä—É–∂–µ! 
üéÅ –ú–∞–ª–µ–Ω—å–∫–∏–π —Å—É–≤–µ–Ω–∏—Ä –¥–ª—è —Ç–µ–±—è, —Ç–∞–º —Ä–∞–∑–±–µ—Ä–µ—à—å—Å—è! üòâ"""
        )

        certificate_file = FSInputFile("images/–ü–æ–¥–∞—Ä–æ—á–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç.pdf")
        await message.answer_document(
            document=certificate_file,
            caption="""üéÅ –í–æ—Ç —Ç–µ–±–µ –Ω–∏—à—Ç—è—á–æ–∫ 
    –†–∞—Å–ø–µ—á–∞—Ç–∞–π –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω! üì±\n"""
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –ø–æ–¥–∞—Ä–∫–∞: {e}")
        await message.answer(
            """üéÅ –û–π –≤—Å—ë, —Å –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è, –¥—Ä—É–∂–µ! 
–ú–∞–ª–µ–Ω—å–∫–∏–π —Å—É–≤–µ–Ω–∏—Ä –¥–ª—è —Ç–µ–±—è, —Ç–∞–º —Ä–∞–∑–±–µ—Ä–µ—à—å—Å—è! üòâ

*–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã–ª –±—ã—Ç—å –∑–¥–µ—Å—å, –Ω–æ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫*"""
        )
    
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
@router.callback_query(QuizStates.question_1, F.data.startswith('q1_'))
async def handle_question_1(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    is_correct = callback.data == correct_answers[1]
    await process_answer(1, callback, None, state, is_correct)

@router.callback_query(QuizStates.question_2, F.data.startswith('q2_'))
async def handle_question_2(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    is_correct = callback.data == correct_answers[2]
    await process_answer(2, callback, None, state, is_correct)

@router.callback_query(QuizStates.question_3, F.data.startswith('q3_'))
async def handle_question_3(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    is_correct = callback.data == correct_answers[3]
    await process_answer(3, callback, None, state, is_correct)

@router.callback_query(QuizStates.question_4, F.data.startswith('q4_'))
async def handle_question_4(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    is_correct = callback.data == correct_answers[4]
    await process_answer(4, callback, None, state, is_correct)

@router.callback_query(QuizStates.question_5, F.data.startswith('q5_'))
async def handle_question_5(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    is_correct = callback.data == correct_answers[5]
    await process_answer(5, callback, None, state, is_correct)

@router.callback_query(QuizStates.question_6, F.data.startswith('q6_'))
async def handle_question_6(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    is_correct = callback.data == correct_answers[6]
    await process_answer(6, callback, None, state, is_correct)

@router.callback_query(QuizStates.question_7, F.data.startswith('q7_'))
async def handle_question_7(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    is_correct = callback.data == correct_answers[7]
    await process_answer(7, callback, None, state, is_correct)

@router.callback_query(QuizStates.question_8, F.data.startswith('q8_'))
async def handle_question_8(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    is_correct = callback.data == correct_answers[8]
    await process_answer(8, callback, None, state, is_correct)

@router.callback_query(QuizStates.question_9, F.data.startswith('q9_'))
async def handle_question_9(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    is_correct = callback.data == correct_answers[9]
    await process_answer(9, callback, None, state, is_correct)

@router.callback_query(QuizStates.question_10, F.data.startswith('q10_'))
async def handle_question_10(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    is_correct = callback.data == correct_answers[10]
    await process_answer(10, callback, None, state, is_correct)